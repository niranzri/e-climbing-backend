const router = require("express").Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User.model");
const { isAuthenticated } = require("../middlewares/auth.middleware");

const saltRounds = 10;

// SIGNUP ROUTE
router.post("/signup", async (req, res) => {
    const {username, email, password} = req.body;

    if (username === "" || email === "" || password === "") {
        res.status(400).json({ message: "Please, provide username, e-mail, snf password"})
        return;
    }

    // Validates the email format with regex
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/;
    if (!emailRegex.test(email)) {
        res.status(400).json({ message: "Please, provide a valid email address" });
        return;
    }

    // Validates the password format with regex
    const passwordRegex = /(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/;
    if (!passwordRegex.test(password)) {
        res.status(400).json({
        message:
            "Password must have at least 6 characters and contain at least one number, one lowercase and one uppercase letter.",
        });
        return;
    }

    try {
        const foundUser = await User.findOne({ email: email.toLowerCase().trim() });
        if (foundUser) {
            res.status(400).json({ message: "User already exists"})
            return;
        }

        const salt = bcrypt.genSaltSync(saltRounds);
        const hashedPassword = bcrypt.hashSync(password, salt);
        const userToRegister = { username, email, hashedPassword } ;
        const newUser = await User.create(userToRegister);
        res.status(201).json({ message: "User created", newUser });
        console.log(newUser); // to be deleted

    } catch (err) {
        res.status(500).json({ message: "Error creating user" });
        console.log(err); // to be deleted (or change to console.error(err))
    }
});


//LOGIN ROUTE
router.post("/login", async (req, res) => {
    const { username, email, password }=req.body;

    try {
        const potentialUser = await User.findOne({ email: email.toLowerCase().trim() })
        if (potentialUser) {
            if (bcrypt.compareSync(password, potentialUser.hashedPassword)) {
                const authToken = jwt.sign(
                  {
                    userId: potentialUser._id,
                  },
                    process.env.TOKEN_SECRET,
                  {
                    algorithm: "HS256",
                    expiresIn: "24h",
                  }
                );

                //res.setHeader('Content-Type', 'application/json');
                // the response body is a JSON object with a kay-value pair, the value of which is the variable generated by the sign() function
                res.status(200).json({ authToken: authToken })
            } else {
                res.status(403).json({ message: 'Incorrect password or email' })
            }
        } else {
            res.status(404).json({ message: "User not found" })
        }
    } catch (err) {
        res.status(500).json({ message: "Error logging in user" }) 
        console.log(err) // to be deleted
    }
})


//VERIFY ROUTE
router.get('/verify', isAuthenticated, async (req, res) => {
    console.log(req.tokenPayload)
    const currentUser = await User.findById(req.tokenPayload.userId)
    res.status(200).json({ message: "User verified" })
})
  

module.exports = router;